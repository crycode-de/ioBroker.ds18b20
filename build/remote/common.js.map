{
  "version": 3,
  "sources": ["../../src/remote/common.ts"],
  "sourcesContent": ["/*\n * Common functions and constants used by the adapter and the remote client.\n */\n\nimport crypto from 'node:crypto';\n\n/**\n * Protocol version for the communication.\n * May change in future versions.\n */\nexport const REMOTE_PROTOCOL_VERSION = 3;\n\n/**\n * Length of the initialization vector for encryption.\n * For AES, this is always 16.\n */\nconst IV_LENGTH = 16;\n\n/**\n * Encrypt a string with the given key.\n * @param text The string to encrypt.\n * @param key The key to use.\n * @throws An error if the key has not 32 bytes.\n */\nexport function encrypt (text: crypto.BinaryLike, key: Buffer): string {\n  const iv = crypto.randomBytes(IV_LENGTH);\n  const cipher = crypto.createCipheriv('aes-256-cbc', key, iv);\n  let encrypted = cipher.update(text);\n\n  encrypted = Buffer.concat([ encrypted, cipher.final() ]);\n\n  return iv.toString('hex') + ':' + encrypted.toString('hex');\n}\n\n/**\n * Decrypt an encrypted string with the given key.\n * @param text The encrypted string to decrypt.\n * @param key The key to use.\n * @throws An error if the key has not 32 bytes isn't valid.\n */\nexport function decrypt (text: string, key: Buffer): string {\n  const textParts = text.split(':');\n  const iv = Buffer.from(textParts.shift()!, 'hex');\n  const encryptedText = Buffer.from(textParts.join(':'), 'hex');\n  const decipher = crypto.createDecipheriv('aes-256-cbc', key, iv);\n  let decrypted = decipher.update(encryptedText);\n\n  decrypted = Buffer.concat([ decrypted, decipher.final() ]);\n\n  return decrypted.toString();\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA,yBAAmB;AAMZ,MAAM,0BAA0B;AAMvC,MAAM,YAAY;AAQX,SAAS,QAAS,MAAyB,KAAqB;AACrE,QAAM,KAAK,mBAAAA,QAAO,YAAY,SAAS;AACvC,QAAM,SAAS,mBAAAA,QAAO,eAAe,eAAe,KAAK,EAAE;AAC3D,MAAI,YAAY,OAAO,OAAO,IAAI;AAElC,cAAY,OAAO,OAAO,CAAE,WAAW,OAAO,MAAM,CAAE,CAAC;AAEvD,SAAO,GAAG,SAAS,KAAK,IAAI,MAAM,UAAU,SAAS,KAAK;AAC5D;AAQO,SAAS,QAAS,MAAc,KAAqB;AAC1D,QAAM,YAAY,KAAK,MAAM,GAAG;AAChC,QAAM,KAAK,OAAO,KAAK,UAAU,MAAM,GAAI,KAAK;AAChD,QAAM,gBAAgB,OAAO,KAAK,UAAU,KAAK,GAAG,GAAG,KAAK;AAC5D,QAAM,WAAW,mBAAAA,QAAO,iBAAiB,eAAe,KAAK,EAAE;AAC/D,MAAI,YAAY,SAAS,OAAO,aAAa;AAE7C,cAAY,OAAO,OAAO,CAAE,WAAW,SAAS,MAAM,CAAE,CAAC;AAEzD,SAAO,UAAU,SAAS;AAC5B;",
  "names": ["crypto"]
}
