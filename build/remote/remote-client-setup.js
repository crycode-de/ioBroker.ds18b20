"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var fs = __toESM(require("fs"));
var os = __toESM(require("os"));
var path = __toESM(require("path"));
const SYSTEMD_SERVICE_NAME = "iobroker-ds18b20-remote.service";
const files = {
  'common.js': 'InVzZSBzdHJpY3QiOwp2YXIgX19jcmVhdGUgPSBPYmplY3QuY3JlYXRlOwp2YXIgX19kZWZQcm9wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5Owp2YXIgX19nZXRPd25Qcm9wRGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7CnZhciBfX2dldE93blByb3BOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzOwp2YXIgX19nZXRQcm90b09mID0gT2JqZWN0LmdldFByb3RvdHlwZU9mOwp2YXIgX19oYXNPd25Qcm9wID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTsKdmFyIF9fZXhwb3J0ID0gKHRhcmdldCwgYWxsKSA9PiB7CiAgZm9yICh2YXIgbmFtZSBpbiBhbGwpCiAgICBfX2RlZlByb3AodGFyZ2V0LCBuYW1lLCB7IGdldDogYWxsW25hbWVdLCBlbnVtZXJhYmxlOiB0cnVlIH0pOwp9Owp2YXIgX19jb3B5UHJvcHMgPSAodG8sIGZyb20sIGV4Y2VwdCwgZGVzYykgPT4gewogIGlmIChmcm9tICYmIHR5cGVvZiBmcm9tID09PSAib2JqZWN0IiB8fCB0eXBlb2YgZnJvbSA9PT0gImZ1bmN0aW9uIikgewogICAgZm9yIChsZXQga2V5IG9mIF9fZ2V0T3duUHJvcE5hbWVzKGZyb20pKQogICAgICBpZiAoIV9faGFzT3duUHJvcC5jYWxsKHRvLCBrZXkpICYmIGtleSAhPT0gZXhjZXB0KQogICAgICAgIF9fZGVmUHJvcCh0bywga2V5LCB7IGdldDogKCkgPT4gZnJvbVtrZXldLCBlbnVtZXJhYmxlOiAhKGRlc2MgPSBfX2dldE93blByb3BEZXNjKGZyb20sIGtleSkpIHx8IGRlc2MuZW51bWVyYWJsZSB9KTsKICB9CiAgcmV0dXJuIHRvOwp9Owp2YXIgX190b0VTTSA9IChtb2QsIGlzTm9kZU1vZGUsIHRhcmdldCkgPT4gKHRhcmdldCA9IG1vZCAhPSBudWxsID8gX19jcmVhdGUoX19nZXRQcm90b09mKG1vZCkpIDoge30sIF9fY29weVByb3BzKAogIC8vIElmIHRoZSBpbXBvcnRlciBpcyBpbiBub2RlIGNvbXBhdGliaWxpdHkgbW9kZSBvciB0aGlzIGlzIG5vdCBhbiBFU00KICAvLyBmaWxlIHRoYXQgaGFzIGJlZW4gY29udmVydGVkIHRvIGEgQ29tbW9uSlMgZmlsZSB1c2luZyBhIEJhYmVsLQogIC8vIGNvbXBhdGlibGUgdHJhbnNmb3JtIChpLmUuICJfX2VzTW9kdWxlIiBoYXMgbm90IGJlZW4gc2V0KSwgdGhlbiBzZXQKICAvLyAiZGVmYXVsdCIgdG8gdGhlIENvbW1vbkpTICJtb2R1bGUuZXhwb3J0cyIgZm9yIG5vZGUgY29tcGF0aWJpbGl0eS4KICBpc05vZGVNb2RlIHx8ICFtb2QgfHwgIW1vZC5fX2VzTW9kdWxlID8gX19kZWZQcm9wKHRhcmdldCwgImRlZmF1bHQiLCB7IHZhbHVlOiBtb2QsIGVudW1lcmFibGU6IHRydWUgfSkgOiB0YXJnZXQsCiAgbW9kCikpOwp2YXIgX190b0NvbW1vbkpTID0gKG1vZCkgPT4gX19jb3B5UHJvcHMoX19kZWZQcm9wKHt9LCAiX19lc01vZHVsZSIsIHsgdmFsdWU6IHRydWUgfSksIG1vZCk7CnZhciBjb21tb25fZXhwb3J0cyA9IHt9OwpfX2V4cG9ydChjb21tb25fZXhwb3J0cywgewogIFJFTU9URV9QUk9UT0NPTF9WRVJTSU9OOiAoKSA9PiBSRU1PVEVfUFJPVE9DT0xfVkVSU0lPTiwKICBkZWNyeXB0OiAoKSA9PiBkZWNyeXB0LAogIGVuY3J5cHQ6ICgpID0+IGVuY3J5cHQKfSk7Cm1vZHVsZS5leHBvcnRzID0gX190b0NvbW1vbkpTKGNvbW1vbl9leHBvcnRzKTsKdmFyIGNyeXB0byA9IF9fdG9FU00ocmVxdWlyZSgiY3J5cHRvIikpOwpjb25zdCBSRU1PVEVfUFJPVE9DT0xfVkVSU0lPTiA9IDM7CmNvbnN0IElWX0xFTkdUSCA9IDE2OwpmdW5jdGlvbiBlbmNyeXB0KHRleHQsIGtleSkgewogIGNvbnN0IGl2ID0gY3J5cHRvLnJhbmRvbUJ5dGVzKElWX0xFTkdUSCk7CiAgY29uc3QgY2lwaGVyID0gY3J5cHRvLmNyZWF0ZUNpcGhlcml2KCJhZXMtMjU2LWNiYyIsIGtleSwgaXYpOwogIGxldCBlbmNyeXB0ZWQgPSBjaXBoZXIudXBkYXRlKHRleHQpOwogIGVuY3J5cHRlZCA9IEJ1ZmZlci5jb25jYXQoW2VuY3J5cHRlZCwgY2lwaGVyLmZpbmFsKCldKTsKICByZXR1cm4gaXYudG9TdHJpbmcoImhleCIpICsgIjoiICsgZW5jcnlwdGVkLnRvU3RyaW5nKCJoZXgiKTsKfQpmdW5jdGlvbiBkZWNyeXB0KHRleHQsIGtleSkgewogIGNvbnN0IHRleHRQYXJ0cyA9IHRleHQuc3BsaXQoIjoiKTsKICBjb25zdCBpdiA9IEJ1ZmZlci5mcm9tKHRleHRQYXJ0cy5zaGlmdCgpLCAiaGV4Iik7CiAgY29uc3QgZW5jcnlwdGVkVGV4dCA9IEJ1ZmZlci5mcm9tKHRleHRQYXJ0cy5qb2luKCI6IiksICJoZXgiKTsKICBjb25zdCBkZWNpcGhlciA9IGNyeXB0by5jcmVhdGVEZWNpcGhlcml2KCJhZXMtMjU2LWNiYyIsIGtleSwgaXYpOwogIGxldCBkZWNyeXB0ZWQgPSBkZWNpcGhlci51cGRhdGUoZW5jcnlwdGVkVGV4dCk7CiAgZGVjcnlwdGVkID0gQnVmZmVyLmNvbmNhdChbZGVjcnlwdGVkLCBkZWNpcGhlci5maW5hbCgpXSk7CiAgcmV0dXJuIGRlY3J5cHRlZC50b1N0cmluZygpOwp9Ci8vIEFubm90YXRlIHRoZSBDb21tb25KUyBleHBvcnQgbmFtZXMgZm9yIEVTTSBpbXBvcnQgaW4gbm9kZToKMCAmJiAobW9kdWxlLmV4cG9ydHMgPSB7CiAgUkVNT1RFX1BST1RPQ09MX1ZFUlNJT04sCiAgZGVjcnlwdCwKICBlbmNyeXB0Cn0pOwovLyMgc291cmNlTWFwcGluZ1VSTD1jb21tb24uanMubWFwCg==',
'ds18b20-remote-client.js': '',
'logger.js': 'InVzZSBzdHJpY3QiOwp2YXIgX19kZWZQcm9wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5Owp2YXIgX19nZXRPd25Qcm9wRGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7CnZhciBfX2dldE93blByb3BOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzOwp2YXIgX19oYXNPd25Qcm9wID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTsKdmFyIF9fZXhwb3J0ID0gKHRhcmdldCwgYWxsKSA9PiB7CiAgZm9yICh2YXIgbmFtZSBpbiBhbGwpCiAgICBfX2RlZlByb3AodGFyZ2V0LCBuYW1lLCB7IGdldDogYWxsW25hbWVdLCBlbnVtZXJhYmxlOiB0cnVlIH0pOwp9Owp2YXIgX19jb3B5UHJvcHMgPSAodG8sIGZyb20sIGV4Y2VwdCwgZGVzYykgPT4gewogIGlmIChmcm9tICYmIHR5cGVvZiBmcm9tID09PSAib2JqZWN0IiB8fCB0eXBlb2YgZnJvbSA9PT0gImZ1bmN0aW9uIikgewogICAgZm9yIChsZXQga2V5IG9mIF9fZ2V0T3duUHJvcE5hbWVzKGZyb20pKQogICAgICBpZiAoIV9faGFzT3duUHJvcC5jYWxsKHRvLCBrZXkpICYmIGtleSAhPT0gZXhjZXB0KQogICAgICAgIF9fZGVmUHJvcCh0bywga2V5LCB7IGdldDogKCkgPT4gZnJvbVtrZXldLCBlbnVtZXJhYmxlOiAhKGRlc2MgPSBfX2dldE93blByb3BEZXNjKGZyb20sIGtleSkpIHx8IGRlc2MuZW51bWVyYWJsZSB9KTsKICB9CiAgcmV0dXJuIHRvOwp9Owp2YXIgX190b0NvbW1vbkpTID0gKG1vZCkgPT4gX19jb3B5UHJvcHMoX19kZWZQcm9wKHt9LCAiX19lc01vZHVsZSIsIHsgdmFsdWU6IHRydWUgfSksIG1vZCk7CnZhciBsb2dnZXJfZXhwb3J0cyA9IHt9OwpfX2V4cG9ydChsb2dnZXJfZXhwb3J0cywgewogIExvZ2dlcjogKCkgPT4gTG9nZ2VyCn0pOwptb2R1bGUuZXhwb3J0cyA9IF9fdG9Db21tb25KUyhsb2dnZXJfZXhwb3J0cyk7CmNsYXNzIExvZ2dlciB7CiAgLyoqCiAgICogTG9nIGEgbWVzc2FnZS4KICAgKiBAcGFyYW0gYXJncyBUaGluZ3MgdG8gbG9nLgogICAqLwogIGxvZyguLi5hcmdzKSB7CiAgICBjb25zb2xlLmxvZyguLi5hcmdzKTsKICB9CiAgLyoqCiAgICogTG9nIGEgbWVzc2FnZSBwcmVwZW5kZWQgd2l0aCBgW0RlYnVnXWAuCiAgICogVGhlIG1lc3NhZ2Ugd2lsbCBvbmx5IGJlIGxvZ2dlZCBpZiBgcHJvY2Vzcy5lbnYuREVCVUdgIGlzIGEgdHJ1dGh5IHZhbHVlLgogICAqIEBwYXJhbSBhcmdzIFRoaW5ncyB0byBsb2cuCiAgICovCiAgZGVidWcoLi4uYXJncykgewogICAgaWYgKCFwcm9jZXNzLmVudi5ERUJVRykgewogICAgICByZXR1cm47CiAgICB9CiAgICBjb25zb2xlLmxvZygiW0RlYnVnXSIsIC4uLmFyZ3MpOwogIH0KICAvKioKICAgKiBMb2cgYSBtZXNzYWdlIHByZXBlbmRlZCB3aXRoIGBbSW5mb11gLgogICAqIEBwYXJhbSBhcmdzIFRoaW5ncyB0byBsb2cuCiAgICovCiAgaW5mbyguLi5hcmdzKSB7CiAgICBjb25zb2xlLmxvZygiW0luZm9dIiwgLi4uYXJncyk7CiAgfQogIC8qKgogICAqIExvZyBhbiBlcnJvciBtZXNzYWdlIHByZXBlbmRlZCB3aXRoIGBbV2Fybl1gLgogICAqIEBwYXJhbSBhcmdzIFRoaW5ncyB0byBsb2cuCiAgICovCiAgd2FybiguLi5hcmdzKSB7CiAgICBjb25zb2xlLndhcm4oIltXYXJuXSIsIC4uLmFyZ3MpOwogIH0KICAvKioKICAgKiBMb2cgYW4gZXJyb3IgbWVzc2FnZSBwcmVwZW5kZWQgd2l0aCBgW0Vycm9yXWAuCiAgICogQHBhcmFtIGFyZ3MgVGhpbmdzIHRvIGxvZy4KICAgKi8KICBlcnJvciguLi5hcmdzKSB7CiAgICBjb25zb2xlLmVycm9yKCJbRXJyb3JdIiwgLi4uYXJncyk7CiAgfQp9Ci8vIEFubm90YXRlIHRoZSBDb21tb25KUyBleHBvcnQgbmFtZXMgZm9yIEVTTSBpbXBvcnQgaW4gbm9kZToKMCAmJiAobW9kdWxlLmV4cG9ydHMgPSB7CiAgTG9nZ2VyCn0pOwovLyMgc291cmNlTWFwcGluZ1VSTD1sb2dnZXIuanMubWFwCg=='
  // will be replaced during remote-client-setup creation
};
for (const f in files) {
  const content = Buffer.from(files[f], "base64").toString("utf-8");
  fs.writeFileSync(f, content, { encoding: "utf-8" });
}
const systemDContent = `[Unit]
Description=ioBroker.ds18b20 remote client
Documentation=https://github.com/crycode-de/ioBroker.ds18b20
After=network.target

[Service]
Type=simple
User=${os.userInfo().username}
WorkingDirectory=${__dirname}
ExecStart=${process.execPath} ${path.join(__dirname, "ds18b20-remote-client.js")}
Restart=on-failure

[Install]
WantedBy=multi-user.target
`;
const systemDFile = path.join(__dirname, SYSTEMD_SERVICE_NAME);
fs.writeFileSync(systemDFile, systemDContent, { encoding: "utf-8" });
const dotEnvContent = `# Settings for the ioBroker.ds18b20 remote client

# Unique ID for this remote system
SYSTEM_ID=my-remote

# IP or hostname of the ioBroker host running the adapter
ADAPTER_HOST=

# Port from the adapter config
ADAPTER_PORT=1820

# Encryption key from the adapter config
ADAPTER_KEY=

# Enable debug log output
#DEBUG=1

# System path of the 1-wire devices
#W1_DEVICES_PATH=/sys/bus/w1/devices
`;
const dotEnvFile = path.join(__dirname, ".env");
if (!fs.existsSync(dotEnvFile)) {
  fs.writeFileSync(dotEnvFile, dotEnvContent, { encoding: "utf-8" });
}
console.log(`- ioBroker.ds18b20 remote client -

Basic setup done.

Please adjust the settings in the .env file.

To manually start the client just run:
  node ds18b20-remote-client.js

To setup the SystemD service, please run:
  sudo cp ${SYSTEMD_SERVICE_NAME} /etc/systemd/system/${SYSTEMD_SERVICE_NAME}
  sudo systemctl daemon-reload
  sudo systemctl enable ${SYSTEMD_SERVICE_NAME}
  sudo systemctl start ${SYSTEMD_SERVICE_NAME}
`);

