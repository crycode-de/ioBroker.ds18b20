{
  "version": 3,
  "sources": ["../src/sensor.ts"],
  "sourcesContent": ["/**\n *  Class for a DS18B20 temperature sensor.\n */\n\nimport { EventEmitter } from 'node:events';\nimport { readFile } from 'node:fs/promises';\n\nimport { boundMethod } from 'autobind-decorator';\n\nimport { round } from './lib/utils';\nimport type { Ds18b20Adapter } from './main';\n\n/**\n * Options for a Sensor.\n */\ninterface SensorOptions {\n  w1DevicesPath: string;\n  address: string;\n  interval: number;\n  nullOnError: boolean;\n  factor: number;\n  offset: number;\n  decimals: number | null;\n\n  remoteSystemId: string | null;\n}\n\n/**\n * Interface to declare events for the Sensor class.\n */\ninterface SensorEvents {\n  value: [ value: number | null, address: string ];\n  error: [ err: Error, address: string ];\n  errorStateChanged: [ hasError: boolean, address: string ];\n}\n\n/**\n * This class represents a single sensor.\n */\nexport class Sensor extends EventEmitter<SensorEvents> {\n  /**\n   * The address (1-wire ID) of the sensor.\n   */\n  public readonly address: string;\n\n  /**\n   * Use null values on errors.\n   */\n  public readonly nullOnError: boolean;\n\n  /**\n   * Factor for value calculation.\n   */\n  public readonly factor: number;\n\n  /**\n   * Offset for value calculation.\n   */\n  public readonly offset: number;\n\n  /**\n   * Number of decimals to round to.\n   */\n  public readonly decimals: number | null;\n\n  /**\n   * SystemID of the client with this sensor if this is a remote sensor.\n   * `null` for local sensors.\n   */\n  public readonly remoteSystemId: string | null;\n\n  /**\n   * Flag if the last read of the sensor had an error.\n   */\n  public hasError: boolean;\n\n  /**\n   * Timer for interval sensor readings.\n   */\n  private timer: ioBroker.Interval | undefined = undefined;\n\n  /**\n   * System path where the 1-wire devices can be read.\n   */\n  private readonly w1DevicesPath: string;\n\n  /**\n   * Reference to the adapter class.\n   */\n  private readonly adapter: Ds18b20Adapter;\n\n  /**\n   * Constructor for a new sensor.\n   * @param opts The options for the Sensor.\n   */\n  constructor (opts: SensorOptions, adapter: Ds18b20Adapter) {\n    super();\n    this.adapter = adapter;\n\n    this.address = opts.address;\n    this.nullOnError = opts.nullOnError;\n    this.factor = opts.factor;\n    this.offset = opts.offset;\n    this.decimals = opts.decimals;\n    this.hasError = true; // true on init while we don't know the current state\n    this.w1DevicesPath = opts.w1DevicesPath;\n    this.remoteSystemId = opts.remoteSystemId;\n\n    // start interval and initial read if interval is set\n    if (opts.interval && opts.interval > 0) {\n      // smallest interval is 500ms\n      if (opts.interval < 500) {\n        opts.interval = 500;\n      }\n      this.timer = this.adapter.setInterval(() => {\n        this.read().catch(() => { /* noop */ });\n      }, opts.interval);\n      this.read().catch(() => { /* noop */ });\n    }\n  }\n\n  /**\n   * Read the temperature.\n   * The value and possible errors will be emitted as events.\n   * @returns The read value.\n   * @throws Error when an error occurs.\n   */\n  @boundMethod\n  public async read (): Promise<number | null> {\n    let val: number | null = null;\n    try {\n      let raw: string;\n\n      if (this.remoteSystemId) {\n        // remote sensor - send request\n        if (!this.adapter.remoteSensorServer) {\n          throw new Error('Remote sensors not enabled');\n        }\n        raw = await this.adapter.remoteSensorServer.read(this.remoteSystemId, this.address);\n      } else {\n        // local sensor - read the file\n        raw = await readFile(`${this.w1DevicesPath}/${this.address}/w1_slave`, 'utf8');\n      }\n\n      val = this.processData(raw);\n\n      this.emit('value', val, this.address);\n\n      if (this.hasError) {\n        this.hasError = false;\n        this.emit('errorStateChanged', false, this.address);\n      }\n\n    } catch (err) {\n      this.emit('error', err as Error, this.address);\n\n      if (this.nullOnError) {\n        this.emit('value', null, this.address);\n      }\n\n      if (!this.hasError) {\n        this.hasError = true;\n        this.emit('errorStateChanged', true, this.address);\n      }\n      throw err;\n    }\n\n    return val;\n  }\n\n  /**\n   * Process the raw data from a sensor file.\n   * @param rawData The raw data read from the sensor file.\n   * @returns The read value.\n   * @throws Error when an error occurs.\n   */\n  public processData (rawData: string): number {\n    const lines = rawData.split('\\n');\n\n    let val: number;\n\n    if (lines[0].includes('YES')) {\n      // checksum ok\n      const bytes = lines[0].split(' ');\n      if (bytes[0] === bytes[1] && bytes[0] === bytes[2] && bytes[0] === bytes[3] && bytes[0] === bytes[4] && bytes[0] === bytes[5] && bytes[0] === bytes[6] && bytes[0] === bytes[7] && bytes[0] === bytes[8]) {\n        // all bytes are the same\n        throw new Error('Communication error');\n      }\n\n      const m = /t=(-?\\d+)/.exec(lines[1]);\n      if (!m) {\n        throw new Error('Parse error');\n      }\n      val = parseInt(m[1], 10) / 1000;\n\n    } else if (lines[0].includes('NO')) {\n      // checksum error\n      throw new Error('Checksum error');\n\n    } else {\n      // read error\n      throw new Error('Read error');\n    }\n\n    // check for specific errors\n    if (val === 85) {\n      throw new Error('No temperature read');\n    } else if (val === -127) {\n      throw new Error('Device disconnected');\n    } else if (val < -80 || val > 150) {\n      // From datasheet: Measures Temperatures from -55\u00B0C to +125\u00B0C\n      throw new Error('Read temperature is out of possible range');\n    }\n\n    // evaluate the result\n    val = val * this.factor + this.offset;\n    if (this.decimals !== null) {\n      val = round(val, this.decimals);\n    }\n\n    return val;\n  }\n\n  /**\n   * Stop a running interval for automated readings.\n   */\n  public stop (): void {\n    if (this.timer) {\n      this.adapter.clearInterval(this.timer);\n      this.timer = undefined;\n    }\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
